import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";
import { sendMail } from "@/lib/mailer";

function isEmail(v: unknown): v is string {
  return typeof v === "string" && /.+@.+\..+/.test(v);
}

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => null);
    if (!body || typeof body !== "object") {
      return NextResponse.json({ ok: false, error: "Invalid JSON" }, { status: 400 });
    }

    const name = typeof body.name === "string" ? body.name.trim() : "";
    const email = typeof body.email === "string" ? body.email.trim() : "";
    const telegram = typeof body.telegram === "string" ? body.telegram.trim() : "";
    const message = typeof body.message === "string" ? body.message.trim() : "";
    const source = typeof body.source === "string" ? body.source.trim() : "unknown";

    if (!name && !email && !telegram && !message) {
      return NextResponse.json({ ok: false, error: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ" }, { status: 400 });
    }

    // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∫–∞–∫ feedback
    await prisma.feedbackMessage.create({
      data: {
        name: name || "‚Äî",
        email: email || "‚Äî",
        message: [message, telegram ? `Telegram/phone: ${telegram}` : null].filter(Boolean).join("\n"),
        service: source || "unknown",
      },
    });

    const to = process.env.SALES_NOTIFICATIONS_TO || process.env.NEXT_PUBLIC_NODEMAILER_USER;
    if (!to) {
      return NextResponse.json({ ok: false, error: "Notification email is not configured" }, { status: 500 });
    }

    const subject = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ ‚Äî ${source}`;
    const lines = [
      `–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`,
      `–ò–º—è: ${name || "‚Äî"}`,
      `Email: ${email || "‚Äî"}`,
      `Telegram/—Ç–µ–ª–µ—Ñ–æ–Ω: ${telegram || "‚Äî"}`,
      "",
      "–°–æ–æ–±—â–µ–Ω–∏–µ:",
      message || "‚Äî",
    ];
    const text = lines.join("\n");
    const html = `
      <div style="font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Arial">
        <h2>üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
        <table style="border-collapse:collapse;width:100%">
          <tr><td style="padding:8px;border:1px solid #eee">–ò—Å—Ç–æ—á–Ω–∏–∫</td><td style="padding:8px;border:1px solid #eee">${source}</td></tr>
          <tr><td style="padding:8px;border:1px solid #eee">–ò–º—è</td><td style="padding:8px;border:1px solid #eee">${name || "‚Äî"}</td></tr>
          <tr><td style="padding:8px;border:1px solid #eee">Email</td><td style="padding:8px;border:1px solid #eee">${email || "‚Äî"}</td></tr>
          <tr><td style="padding:8px;border:1px solid #eee">Telegram/—Ç–µ–ª–µ—Ñ–æ–Ω</td><td style="padding:8px;border:1px solid #eee">${telegram || "‚Äî"}</td></tr>
        </table>
        ${message ? `<p style="margin-top:12px"><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong><br/>${message.replace(/\n/g, "<br/>")}</p>` : ""}
      </div>`;

    await sendMail({ to, subject, text, html });

    return NextResponse.json({ ok: true });
  } catch (e) {
    console.error("lead error", e);
    return NextResponse.json({ ok: false, error: "Internal error" }, { status: 500 });
  }
}

