import nodemailer from "nodemailer";

type SendMailArgs = {
  to: string | string[];
  subject: string;
  text: string;
  html?: string;
};

function resolveDefaultHostPort(email?: string) {
  const domain = (email?.split("@")[1] || "").toLowerCase();
  if (domain.includes("gmail.com") || domain.includes("googlemail.com")) {
    return { host: "smtp.gmail.com", port: 465, secure: true };
  }
  if (domain.includes("yandex.")) {
    return { host: "smtp.yandex.ru", port: 465, secure: true };
  }
  if (domain.includes("mail.ru")) {
    return { host: "smtp.mail.ru", port: 465, secure: true };
  }
  // Generic fallback
  return { host: `smtp.${domain || "localhost"}`, port: 465, secure: true };
}

function getTransport() {
  const user = process.env.SMTP_USER || process.env.NEXT_PUBLIC_NODEMAILER_USER;
  const pass = process.env.SMTP_PASSWORD || process.env.NEXT_PUBLIC_NODEMAILER_PASSWORD;
  const guessed = resolveDefaultHostPort(user);
  const host = process.env.SMTP_HOST || guessed.host;
  const port = Number(process.env.SMTP_PORT || guessed.port);
  const secure = port === 465; // 465 true, 587 false

  if (!user || !pass) {
    throw new Error("SMTP credentials are not configured");
  }

  return nodemailer.createTransport({
    host,
    port,
    secure,
    auth: { user, pass },
  });
}

export async function sendMail({ to, subject, text, html }: SendMailArgs) {
  const transporter = getTransport();
  const from = process.env.MAIL_FROM || process.env.NEXT_PUBLIC_NODEMAILER_USER!;
  try {
    await transporter.sendMail({ from, to, subject, text, html: html ?? text });
    return true;
  } catch (e) {
    console.error("sendMail error", e);
    return false;
  }
}

export type OrderEmailPayload = {
  orderId: string;
  serviceName: string;
  amountRub: number;
  paidAt: Date | null;
  paymentId?: string | null;
  confirmationUrl?: string | null;
  userEmail?: string | null;
  userName?: string | null;
  contact?: { name?: string | null; email?: string | null; telegram?: string | null } | null;
  comment?: string | null;
};

function fmtRub(n: number) {
  try {
    return new Intl.NumberFormat("ru-RU", { style: "currency", currency: "RUB", maximumFractionDigits: 2 }).format(n);
  } catch {
    return `${n.toFixed(2)} ‚ÇΩ`;
  }
}

function buildAdminHtml(p: OrderEmailPayload) {
  const paidAtLabel = p.paidAt ? p.paidAt.toLocaleString("ru-RU") : "‚Äî";
  const contactName = p.contact?.name || p.userName || "‚Äî";
  const contactEmail = p.contact?.email || p.userEmail || "‚Äî";
  const contactTelegram = p.contact?.telegram || "‚Äî";
  return `
  <div style="font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Arial">
    <h2>‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞</h2>
    <table style="border-collapse:collapse;width:100%">
      <tr><td style="padding:8px;border:1px solid #eee">üßæ –ó–∞–∫–∞–∑</td><td style="padding:8px;border:1px solid #eee">${p.orderId}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">üõ† –°–µ—Ä–≤–∏—Å</td><td style="padding:8px;border:1px solid #eee">${p.serviceName}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">üí∞ –°—É–º–º–∞</td><td style="padding:8px;border:1px solid #eee">${fmtRub(p.amountRub)}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">üìÖ –î–∞—Ç–∞</td><td style="padding:8px;border:1px solid #eee">${paidAtLabel}</td></tr>
      ${p.paymentId ? `<tr><td style="padding:8px;border:1px solid #eee">üß© ID –ø–ª–∞—Ç–µ–∂–∞</td><td style="padding:8px;border:1px solid #eee">${p.paymentId}</td></tr>` : ""}
      ${p.confirmationUrl ? `<tr><td style="padding:8px;border:1px solid #eee">üîó YooKassa</td><td style="padding:8px;border:1px solid #eee"><a href="${p.confirmationUrl}">${p.confirmationUrl}</a></td></tr>` : ""}
    </table>
    <h3 style="margin-top:16px">üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
    <table style="border-collapse:collapse;width:100%">
      <tr><td style="padding:8px;border:1px solid #eee">–ò–º—è</td><td style="padding:8px;border:1px solid #eee">${contactName}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">Email</td><td style="padding:8px;border:1px solid #eee">${contactEmail}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">Telegram/—Ç–µ–ª–µ—Ñ–æ–Ω</td><td style="padding:8px;border:1px solid #eee">${contactTelegram}</td></tr>
    </table>
    ${p.comment ? `<p style="margin-top:12px"><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${p.comment}</p>` : ""}
  </div>`;
}

function buildUserHtml(p: OrderEmailPayload) {
  const paidAtLabel = p.paidAt ? p.paidAt.toLocaleString("ru-RU") : "‚Äî";
  return `
  <div style="font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Arial">
    <h2>üéâ –°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</h2>
    <p>–ú—ã –æ—Ñ–æ—Ä–º–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 15‚Äì60 –º–∏–Ω—É—Ç (–∏–Ω–æ–≥–¥–∞ –¥–æ 24 —á–∞—Å–æ–≤).</p>
    <h3>üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
    <table style="border-collapse:collapse;width:100%">
      <tr><td style="padding:8px;border:1px solid #eee">üõ† –°–µ—Ä–≤–∏—Å</td><td style="padding:8px;border:1px solid #eee">${p.serviceName}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">üí∞ –°—É–º–º–∞</td><td style="padding:8px;border:1px solid #eee">${fmtRub(p.amountRub)}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">üßæ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</td><td style="padding:8px;border:1px solid #eee">${p.orderId}</td></tr>
      <tr><td style="padding:8px;border:1px solid #eee">üìÖ –î–∞—Ç–∞</td><td style="padding:8px;border:1px solid #eee">${paidAtLabel}</td></tr>
      ${p.paymentId ? `<tr><td style="padding:8px;border:1px solid #eee">üß© ID –ø–ª–∞—Ç–µ–∂–∞</td><td style="padding:8px;border:1px solid #eee">${p.paymentId}</td></tr>` : ""}
    </table>
    <h3 style="margin-top:16px">‚úçÔ∏è –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
    <ul>
      <li>–ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–µ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ (—É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –∫—É–¥–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É) ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö.</li>
      <li>–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—á—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram: <a href="https://t.me/aibazaru">@aibazaru</a>.</li>
    </ul>
    <p>–ö–æ–º–∞–Ω–¥–∞ AIBazar ‚Äî –Ω–∞ —Å–≤—è–∑–∏ 09:00‚Äì22:00 (–ú–°–ö).</p>
  </div>`;
}

export async function sendOrderPaidEmails(payload: OrderEmailPayload) {
  const adminTo = process.env.SALES_NOTIFICATIONS_TO || process.env.NEXT_PUBLIC_NODEMAILER_USER;
  if (!adminTo) return false;

  const {
    orderId,
    serviceName,
    amountRub,
    paidAt,
    paymentId,
    confirmationUrl,
    userEmail,
    userName,
    contact,
    comment,
  } = payload;

  const paidAtLabel = paidAt ? paidAt.toLocaleString("ru-RU") : "‚Äî";
  const contactName = contact?.name || userName || "‚Äî";
  const contactEmail = contact?.email || userEmail || "‚Äî";
  const contactTelegram = contact?.telegram || "‚Äî";

  // Admin email
  const adminSubject = `[–û–ø–ª–∞—Ç–∞] ${serviceName} ‚Äî –∑–∞–∫–∞–∑ ${orderId}`;
  const adminText = [
    `–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ${orderId}.`,
    `–°–µ—Ä–≤–∏—Å: ${serviceName}`,
    `–°—É–º–º–∞: ${amountRub.toLocaleString("ru-RU")} ‚ÇΩ`,
    `–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: ${paidAtLabel}`,
    paymentId ? `ID –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}` : null,
    confirmationUrl ? `–°—Å—ã–ª–∫–∞ –ÆKassa: ${confirmationUrl}` : null,
    ``,
    `–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`,
    `–ò–º—è: ${contactName}`,
    `Email: ${contactEmail}`,
    `Telegram/—Ç–µ–ª–µ—Ñ–æ–Ω: ${contactTelegram}`,
    comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : null,
  ]
    .filter(Boolean)
    .join("\n");

  await sendMail({ to: adminTo, subject: adminSubject, text: adminText, html: buildAdminHtml(payload) });

  // Customer email
  const toUser = contact?.email || userEmail;
  if (toUser) {
    const userSubject = `–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏: ${serviceName}`;
    const userLines = [
      `–°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.`,
      ``,
      `–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:`,
      `–°–µ—Ä–≤–∏—Å: ${serviceName}`,
      `–°—É–º–º–∞: ${amountRub.toLocaleString("ru-RU")} ‚ÇΩ`,
      `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}`,
      `–î–∞—Ç–∞: ${paidAtLabel}`,
      paymentId ? `ID –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}` : null,
      ``,
      `–ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–µ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö.`,
      `–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—á—Ç–µ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ Telegram @aibazaru.`,
    ].filter(Boolean);
    await sendMail({ to: toUser, subject: userSubject, text: userLines.join("\n"), html: buildUserHtml(payload) });
  }

  return true;
}

export async function sendVerificationEmail(to: string, link: string, name?: string | null) {
  const subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email ‚Äî AI Bazar";
  const text = [
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ${name ? ", " + name : ""}!`,
    "",
    "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ AI Bazar. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–æ —Å—Å—ã–ª–∫–µ:",
    link,
    "",
    "–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.",
  ].join("\n");

  const html = `
  <div style=\"font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Arial;max-width:560px;margin:0 auto\">
    <h2>üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ${name ? ", " + name : ""}!</h2>
    <p>–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ <strong>AI Bazar</strong>. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.</p>
    <p style=\"margin:24px 0;text-align:center\">
      <a href=\"${link}\" style=\"display:inline-block;background:#111;color:#fff;text-decoration:none;padding:12px 18px;border-radius:10px\">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email</a>
    </p>
    <p style=\"font-size:12px;color:#555\">–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É:</p>
    <p style=\"word-break:break-all;font-size:12px;color:#555\"><a href=\"${link}\">${link}</a></p>
  </div>`;

  await sendMail({ to, subject, text, html });
}

export async function sendResetPasswordEmail(to: string, link: string, name?: string | null) {
  const subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è ‚Äî AI Bazar";
  const text = [
    `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ${name ? ", " + name : ""}!`,
    "",
    "–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
    link,
    "",
    "–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.",
  ].join("\n");
  const html = `
  <div style=\"font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Arial;max-width:560px;margin:0 auto\">
    <h2>üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
    <p>–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</p>
    <p style=\"margin:24px 0;text-align:center\">
      <a href=\"${link}\" style=\"display:inline-block;background:#111;color:#fff;text-decoration:none;padding:12px 18px;border-radius:10px\">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</a>
    </p>
    <p style=\"font-size:12px;color:#555\">–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É:</p>
    <p style=\"word-break:break-all;font-size:12px;color:#555\"><a href=\"${link}\">${link}</a></p>
  </div>`;
  await sendMail({ to, subject, text, html });
}
